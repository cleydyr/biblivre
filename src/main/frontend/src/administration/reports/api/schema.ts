/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/report": {
    get: operations["getReports"];
    /** @description Creates a new report template */
    post: operations["addReport"];
  };
  "/report/{reportId}": {
    /** @description Returns a specific report template */
    get: operations["getReport"];
    /** @description Updates a report on the server */
    put: operations["updateReport"];
    /** @description Deletes a report and all of its fills from the server */
    delete: operations["deleteReport"];
  };
  "/report/{reportId}/fill": {
    /** @description Fills a report template with the provided parameters */
    post: operations["fillReport"];
    /** @description Deletes all fills of a given report */
    delete: operations["deleteFills"];
  };
  "/report/{reportId}/fill/{reportFillId}": {
    /** @description Returns a specific filled report */
    get: operations["getReportFill"];
    /** @description Deletes a filled report */
    delete: operations["deleteReportFill"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Identifiable: {
      /** @example 42 */
      id?: number;
    };
    Report: WithRequired<components["schemas"]["Identifiable"] & components["schemas"]["NameAndDescription"] & {
      parameters?: components["schemas"]["ReportParameter"][];
    }, "name">;
    ReportUpload: components["schemas"]["Report"] & {
      /** Format: binary */
      file?: string;
    };
    ReportParameter: {
      /** @example dataFim */
      name: string;
      /** @example java.time.LocalDate */
      type: string;
    };
    /** @description Parameters needed to generate a report fill */
    ReportFillParameter: {
      parameterName: string;
      parameterValue: string;
    };
    NameAndDescription: {
      name: string;
      description?: string;
    };
    ReportFill: {
      /** @example 42 */
      reportId?: number;
      /**
       * @example [
       *   {
       *     "parameterName": "dataInicio",
       *     "parameterValue": "1986-03-12"
       *   }
       * ]
       */
      fillParameters: components["schemas"]["ReportFillParameter"][];
    };
    ReportFillResource: {
      /** Format: uri */
      url?: string;
    };
  };
  responses: {
    /** @description Unexpected errors on the server side */
    "500ApiError": {
      content: {
        "application/json": {
          /** @example 500 */
          statusCode?: number;
          /** @example An unexpected error occurred on the server. Please contact support. */
          message?: string;
        };
      };
    };
    /** @description The requested object couldn't be found in the server */
    "404ApiError": {
      content: {
        "application/json": {
          /** @example 404 */
          statusCode?: number;
          error?: {
            /** @example Resource with id 42 can't be found */
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    ReportId: number;
    ReportFillId: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getReports: {
    responses: {
      /** @description The list of report templates available at the instance */
      200: {
        content: {
          "application/json": components["schemas"]["Report"][];
        };
      };
    };
  };
  /** @description Creates a new report template */
  addReport: {
    /** @description The report to be created */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ReportUpload"];
      };
    };
    responses: {
      /** @description The resource has been created */
      201: {
        content: {
          "application/json": components["schemas"]["Report"];
        };
      };
      500: components["responses"]["500ApiError"];
    };
  };
  /** @description Returns a specific report template */
  getReport: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
      };
    };
    responses: {
      /** @description The specific report with the provided id */
      200: {
        content: {
          "application/json": components["schemas"]["Report"][];
        };
      };
      404: components["responses"]["404ApiError"];
      500: components["responses"]["500ApiError"];
    };
  };
  /** @description Updates a report on the server */
  updateReport: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NameAndDescription"];
      };
    };
    responses: {
      /** @description The resource has been created or updated */
      201: {
        content: {
          "application/json": components["schemas"]["Report"];
        };
      };
      500: components["responses"]["500ApiError"];
    };
  };
  /** @description Deletes a report and all of its fills from the server */
  deleteReport: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
      };
    };
    responses: {
      /** @description The resource has been deleted */
      204: {
        content: never;
      };
    };
  };
  /** @description Fills a report template with the provided parameters */
  fillReport: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReportFillParameter"][];
      };
    };
    responses: {
      /** @description The filled report */
      200: {
        content: {
          "application/json": components["schemas"]["ReportFill"];
        };
      };
      500: components["responses"]["500ApiError"];
    };
  };
  /** @description Deletes all fills of a given report */
  deleteFills: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
      };
    };
    responses: {
      /** @description The fills have been deleted */
      204: {
        content: never;
      };
      404: components["responses"]["404ApiError"];
      500: components["responses"]["404ApiError"];
    };
  };
  /** @description Returns a specific filled report */
  getReportFill: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
        reportFillId: components["parameters"]["ReportFillId"];
      };
    };
    responses: {
      /** @description The specific filled report with the provided id */
      200: {
        content: {
          "application/json": (components["schemas"]["ReportFill"] & components["schemas"]["ReportFillResource"])[];
        };
      };
      404: components["responses"]["404ApiError"];
      500: components["responses"]["500ApiError"];
    };
  };
  /** @description Deletes a filled report */
  deleteReportFill: {
    parameters: {
      path: {
        reportId: components["parameters"]["ReportId"];
        reportFillId: components["parameters"]["ReportFillId"];
      };
    };
    responses: {
      /** @description Filled report deleted successfully */
      204: {
        content: never;
      };
      404: components["responses"]["404ApiError"];
      500: components["responses"]["500ApiError"];
    };
  };
}
