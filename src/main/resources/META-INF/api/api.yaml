openapi: 3.0.3
info:
  title: Biblivre REST API
  description: |-

  version: 0.0.1
paths:
  /report:
    get:
      responses:
        200:
          description: The list of report templates available at the instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
      operationId: getReport
    post:
      description: Creates a new report template
      requestBody:
        description: The report to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'

      responses:
        201:
          description: The resource has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        500:
          $ref: '#/components/responses/500ApiError'
      operationId: addReport
  /report/{reportId}:
    get:
      description: Returns a specific report template
      parameters:
        - $ref: '#/components/parameters/ReportId'
      responses:
        200:
          description: The specific report with the provided id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        404:
          $ref: '#/components/responses/404ApiError'
        500:
          $ref: '#/components/responses/500ApiError'
    delete:
      description: Deletes a report from the server
      parameters:
        - $ref: '#/components/parameters/ReportId'
      responses:
        204:
          description: The resource has been deleted
    put:
      description: Updates a report on the server
      parameters:
        - $ref: '#/components/parameters/ReportId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        201:
          description: The resource has been created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        500:
          $ref: '#/components/responses/500ApiError'
  /report/{reportId}/fill:
    post:
      description: Fills a report template with the provided parameters
      parameters:
        - $ref: '#/components/parameters/ReportId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  example: { "dataFim": "2021-12-31" }
      responses:
        200:
          description: The filled report
          content:
            application/json:
              schema:
                type: object
                properties:
                  report:
                    type: array
                    items:
                      $ref: '#/components/schemas/Report'
        500:
          $ref: '#/components/responses/500ApiError'
  /report/{reportId}/fill/{reportFillId}:
    get:
      description: Returns a specific filled report
      parameters:
        - $ref: '#/components/parameters/ReportId'
        - $ref: '#/components/parameters/ReportFillId'
      responses:
        200:
          description: The specific filled report with the provided id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        404:
          $ref: '#/components/responses/404ApiError'
        500:
          $ref: '#/components/responses/500ApiError'
    delete:
      description: Deletes a filled report
      parameters:
        - $ref: '#/components/parameters/ReportId'
        - $ref: '#/components/parameters/ReportFillId'
      responses:
        204:
          description: Filled report deleted successfully
        404:
          $ref: '#/components/responses/404ApiError'
        500:
          $ref: '#/components/responses/500ApiError'
components:
  parameters:
    ReportId:
      name: reportId
      in: path
      required: true
      schema:
        type: integer
        example: 42
    ReportFillId:
      name: reportFillId
      in: path
      required: true
      schema:
        type: integer
        example: 314
  schemas:
    Report:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: Relatório completo de localização
        description:
          type: string
          example: Lista todos os exemplares com sua localização e título
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ReportParameter'
    ReportParameter:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: dataFim
        type:
          type: string
          example: java.time.LocalDate
    ReportFill:
      type: object
      required:
        - parameters
      properties:
        reportId:
          type: integer
          example: 42
        parameters:
          type: object
          example: { "dataFim": "2021-12-31" }
  responses:
    500ApiError:
      description: Unexpected errors on the server side
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 500
              message:
                type: string
                example: An unexpected error occurred on the server. Please contact support.
    404ApiError:
      description: The requested object couldn't be found in the server
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 404
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Report with id 42 can't be found
